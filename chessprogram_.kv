#:import ENGINE_ANALYSIS main.ENGINE_ANALYSIS
#:import ENGINE_TRAINING main.ENGINE_TRAINING
#:import ENGINE_PLAY main.ENGINE_PLAY
#:import pgn chess.pgn


[HSeparator@Label]:
    size_hint_y: None
    height: max(dp(25), self.texture_size[1] + dp(10))
    text: ctx.text if 'text' in ctx else ''
    text_size: self.width, None
    valign: 'middle'
    halign: 'center'

<LabeledSlider@Slider>:
    step: 1
    Label:
        text: '{}'.format(int(root.value))
        size: self.texture_size
        top: root.center_y - sp(20)
        center_x: root.value_pos[0]

<Annotation>:
    ActionBar:
        size_hint_y: 1
        ActionView:
            use_separator: True
            ActionPrevious:
                title: 'Move'
                with_previous: False

            ActionOverflow:
            ActionGroup:
                id: annotation_action_group
                mode: 'spinner'
                text: '!?'
                ActionButton:
                    text: 'Reset'
                    on_press: root.set_move_eval(pgn.NAG_NULL, self)

                ActionButton:
                    text: '!?'
                    on_press: root.set_move_eval(pgn.NAG_SPECULATIVE_MOVE, self)
                ActionButton:
                    text: '!'
                    on_press: root.set_move_eval(pgn.NAG_GOOD_MOVE, self)
                ActionButton:
                    text: '?'
                    on_press: root.set_move_eval(pgn.NAG_MISTAKE, self)
                ActionButton:
                    text: '?!'
                    on_press: root.set_move_eval(pgn.NAG_DUBIOUS_MOVE, self)
            ActionGroup:
                id: eval_action_group
                mode: 'normal'
                text: 'Eval'
                ActionButton:
                    text: 'Reset'
                    on_press: root.set_pos_eval(pgn.NAG_NULL, self)
                ActionButton:
                    text: '+='
                    on_press: root.set_pos_eval(pgn.NAG_WHITE_SLIGHT_ADVANTAGE, self)
                ActionButton:
                    text: '='
                    on_press: root.set_pos_eval(pgn.NAG_DRAWISH_POSITION, self)
                ActionButton:
                    text: '=+'
                    on_press: root.set_pos_eval(pgn.NAG_BLACK_SLIGHT_ADVANTAGE, self)
                ActionButton:
                    text: 'Comment'
                    on_press: root.open_comment_dialog(self)
        ActionView:
            use_separator: True
            ActionPrevious:
                title: 'Variation'
                with_previous: False
            ActionGroup:
                id: variation_action_group
                mode: 'normal'
                text: 'Variation'
                ActionButton:
                    text: 'Promote'
                    on_press: root.process_variation('promote', self)
                ActionButton:
                    text: 'Delete'
                    on_press: root.process_variation('delete', self)
                ActionButton:
                    text: 'Undo'
                    on_press: root.undo(self)

<GameControls>:
    ActionBar:
        size_hint_y: 1
        ActionView:
            use_separator: True
            ActionPrevious:
                title: 'Game'
                with_previous: False

            ActionOverflow:
            ActionGroup:
                id: game_action_group
                mode: 'spinner'
                text: 'Game'
                ActionButton:
                    text: 'Settings'
                    on_press: root.go_to_settings(self)
                ActionButton:
                    text: 'New Game'
                    on_press: root.new(self)
                ActionButton:
                    text: 'Save Game'
                    on_press: root.save_game_dialog(self)
                ActionButton:
                    text: 'Replace Game'
                    on_press: root.save_game_dialog(self, replace=True)
                ActionButton:
                    text: 'Export Games'
                    on_press: root.save_games(self)

<OpeningAnalysisPopup>:
    size_hint: 1, 1
    auto_dismiss: False
    title: 'Opening Builder'
    BoxLayout:
        orientation: 'vertical'
        ToggleButton:
            id: use_ext_eng
            halign: 'center'
            group: 'advantage'
            text: 'External Engine'
            state: 'normal'
        Label:
            text: 'Seconds per move on regular and novel positions'
        BoxLayout:
            orientation: 'horizontal'
            LabeledSlider:
                id: regular_seconds_per_move
                value: 4
                min: 1
                max: 600
                on_value: self.value = int(self.value)
            LabeledSlider:
                id: interesting_seconds_per_move
                value: 60
                min: 1
                max: 600
                on_value: self.value = int(self.value)

        Label:
            text: 'Dubious/Mistake/Blunder centipawn thresholds'
        BoxLayout:
            orientation: 'horizontal'
            LabeledSlider:
                id: dubious_threshold
                value: 35
                min: 1
                max: 100
                on_value: self.value = int(self.value)
            LabeledSlider:
                id: mistake_threshold
                value: 60
                min: 1
                max: 200
                on_value: self.value = int(self.value)
            LabeledSlider:
                id: blunder_threshold
                value: 200
                min: 1
                max: 500
                on_value: self.value = int(self.value)
        BoxLayout:
            orientation: 'horizontal'
            ToggleButton:
                halign: 'center'
                group: 'advantage'
                id: white_rep
                text: 'Build White Repertoire'
                state: 'normal'
            ToggleButton:
                halign: 'center'
                group: 'advantage'
                id: black_rep
                text: 'Build Black Repertoire'
                state: 'normal'

        BoxLayout:
            orientation: 'horizontal'
            Button:
                text: 'Start'
                on_press: root.start_analyze_opening({"dubious_threshold": dubious_threshold.value, "mistake_threshold": mistake_threshold.value, "blunder_threshold": blunder_threshold.value, "regular_sec_per_move": regular_seconds_per_move.value, "interesting_sec_per_move": interesting_seconds_per_move.value, "use_ext_eng": use_ext_eng.state, "white_rep": white_rep.state, "black_rep": black_rep.state})
            Button:
                text: 'Cancel'
                on_press: root.dismiss()


<GameAnalysisPopup>:
    size_hint: 1, 1
    auto_dismiss: False
    title: 'Game Analysis'
    BoxLayout:
        orientation: 'vertical'
        ToggleButton:
            id: use_ext_eng
            halign: 'center'
            group: 'advantage'
            text: 'External Engine'
            state: 'normal'
        ToggleButton:
            id: use_medal_positions
            halign: 'center'
            group: 'advantage'
            text: 'Medal Positions? (Positions containing "medal" in comments)'
            state: 'normal'
        Label:
            text: 'Seconds per move on regular and interesting positions'
        BoxLayout:
            orientation: 'horizontal'
            LabeledSlider:
                id: regular_seconds_per_move
                value: 4
                min: 1
                max: 600
                on_value: self.value = int(self.value)
            LabeledSlider:
                id: interesting_seconds_per_move
                value: 60
                min: 1
                max: 600
                on_value: self.value = int(self.value)

        Label:
            text: 'Dubious/Mistake/Blunder centipawn thresholds'
        BoxLayout:
            orientation: 'horizontal'
            LabeledSlider:
                id: dubious_threshold
                value: 35
                min: 1
                max: 100
                on_value: self.value = int(self.value)
            LabeledSlider:
                id: mistake_threshold
                value: 60
                min: 1
                max: 200
                on_value: self.value = int(self.value)
            LabeledSlider:
                id: blunder_threshold
                value: 200
                min: 1
                max: 500
                on_value: self.value = int(self.value)
        BoxLayout:
            orientation: 'horizontal'
            ToggleButton:
                halign: 'center'
                group: 'advantage'
                text: 'Seek White Advantage'
                state: 'normal'
            ToggleButton:
                halign: 'center'
                group: 'advantage'
                text: 'Seek Black Advantage'
                state: 'normal'

        BoxLayout:
            orientation: 'horizontal'
            Button:
                text: 'Start'
                on_press: root.start_analyze_game({"dubious_threshold": dubious_threshold.value, "mistake_threshold": mistake_threshold.value, "blunder_threshold": blunder_threshold.value, "regular_sec_per_move": regular_seconds_per_move.value, "interesting_sec_per_move": interesting_seconds_per_move.value, "use_ext_eng": use_ext_eng.state, "use_medal_positions": use_medal_positions.state})
            Button:
                text: 'Cancel'
                on_press: root.dismiss()


<EngineControls>:
    ActionBar:
        size_hint_y: 1
        ActionView:
            use_separator: True
            ActionPrevious:
                title: 'Engine'
                with_previous: False

            ActionOverflow:
            ActionButton:
                text: 'Analysis'
                on_press: root.toggle_engine(ENGINE_ANALYSIS)
            ActionButton:
                text: 'Play'
                on_press: root.toggle_engine(ENGINE_PLAY)

            ActionButton:
                text: 'Train'
                on_press: root.toggle_engine(ENGINE_TRAINING)

            ActionButton:
                text: 'Review'
                on_press: root.analyze_game(self)

            ActionButton:
                text: 'Opening'
                on_press: root.analyze_opening(self)

            ActionGroup:
                id: game_action_group
                mode: 'spinner'
                text: 'Cloud'
                ActionButton:
                    text: 'Start Engine'
                    on_press: root.start_cloud_engine(self)

                ActionButton:
                    text: 'Stop Engine'
                    on_press: root.stop_cloud_engine(self)

